% High boost filtering - mix original image f(x,y) and Laplacian filtered
clc; clear;

% Read in image
I = imread('flower.tif');

% Perform high boost filtering
A = 2; % A>=1
laplatian_mask_number = 1;
[ret,matlab_conv_L] = high_boost_filter(I, laplatian_mask_number, A);
imshow([I, ret,matlab_conv_L]);pause;
display (isequal(matlab_conv_L,ret)); % same result

% High-boost filtering function
function [ret,matlab_conv_L] = high_boost_filter(I, M, A)
    % Verify that A is valid
    if A < 1
        error('A >= 1')
    end

    % Commonly used Laplacian mask
    if M == 1   % Mask 1
        mask = double([1 1 1; 1 -8 1; 1 1 1]); % in lecture
    elseif M == 2   % Mask 2
        mask = double([0 1 0; 1 -4 1; 0 1 0]);
    else
        error('M==1 || M==2')
    end
    
    kernel_size = [3,3];
    half_kernel_size = floor(size(kernel_size,1));
    
    f = double(I);  % double
    pad_f = padarray(f,[half_kernel_size,half_kernel_size],0,'both');
    
    % Compute Laplacian filtered image
    matlab_conv_L = conv2(f, mask,'same'); % matlab version of conv2d has
    % padding(1,1)
    L = zeros(size(I));
    for i=1+half_kernel_size:size(I,1)+half_kernel_size
       for j = 1+half_kernel_size:size(I,2)+half_kernel_size
           conv_area = pad_f(i-half_kernel_size:i+half_kernel_size, j-half_kernel_size:j+half_kernel_size); % convolution
           L(i-half_kernel_size,j-half_kernel_size) = sum(conv_area(:).*mask(:)); % convolution dot product
       end
    end
    
    ret = (A-1).*f + L; % Mix original image and Laplacian filtered image
    matlab_conv_L = (A-1).*f + matlab_conv_L;
end